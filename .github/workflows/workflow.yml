name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Récupérer le code
        uses: actions/checkout@v4
        with:
          # Nécessaire pour une analyse Sonar précise
          fetch-depth: 0

      # --- Configuration des deux environnements ---
      - name: Installer Java (pour le backend)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Installer Node.js (pour le frontend)
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: front/package-lock.json

      # --- Étape Backend ---
      - name: Compiler et tester le backend
        run: mvn -B clean verify -f back/pom.xml

      # --- Étape Frontend ---
      - name: Installer les dépendances du frontend
        run: npm ci --prefix front

      - name: Lancer les tests et la couverture du frontend
        run: npm run test --prefix front

      # --- Étape d'Analyse Unifiée ---
      - name: Lancer l'analyse SonarCloud
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          # On configure le scanner pour qu'il trouve les deux rapports
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.sources=back/src/main,front/src
            -Dsonar.tests=back/src/test
            -Dsonar.java.binaries=back/target/classes
            -Dsonar.coverage.jacoco.xmlReportPaths=back/target/site/jacoco/jacoco.xml
            -Dsonar.typescript.lcov.reportPaths=front/coverage/bobapp/lcov.info

  docker:
    # Ce job s'exécute après le succès du précédent
    needs: [build-and-analyze]
    runs-on: ubuntu-latest
    steps:
      - name: Récupérer le code
        uses: actions/checkout@v4

      - name: Se connecter à Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./back
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/bobapp-backend:latest

      - name: Build and Push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./front
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/bobapp-frontend:latest